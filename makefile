FILEPATH = ./sole
HELPF = \033[36m%-30s\033[0m %s\n

LFLAGS =
ifeq ($(SIM),TRUE)
  LFLAGS = --target=sim65c02 -Ln $(FILEPATH).sym
endif

# determine OS
ifeq ($(OS),Windows_NT)
	OS :=  Windows
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Darwin)
		OS := MacOS
	else ifeq ($(UNAME_S),Linux)
		OS := Linux
		ifneq ($(wildcard /etc/debian_version),)
		  OS := Debian_Based
      # So we assume it has apt-get
		endif
	endif
endif

# aliases
.PHONY: all install assemble link dump write clean help simulate loc

ifeq ($(OS),Windows)
all: assemble link # assemble, link, and write file to the EEPROM (if possible)
else
all: assemble link write
endif

install: # install all dependencies (Mac: assumes you have homebrew installed) (Windows: not availbable)
ifeq ($(OS),Debian_Based)
# minipro
	apt-get install build-essential pkg-config libusb-1.0-0-dev
	git clone https://gitlab.com/DavidGriffith/minipro.git && cd minipro && make && make install && cd .. && rm -rf minipro
# CC65
	apt-get install cc65
endif
ifeq ($(OS),MacOS)
	brew install pkg-config
	brew install minipro
	brew install cc65
	brew install libusb
else
	@echo only available on Mac and Debian-based systems
endif

link: $(FILEPATH).bin # Create sole.bin
assemble: $(FILEPATH).o # Create sole.o

%.o: %.asm # Generate a respective *.o file from any *.asm
	ca65 $^

%.bin: %.cfg %.o #Generate a respective *.bin file from any *.cfg and *.o
	ld65 $(LFLAGS) -C $^ -o $@

dump: $(FILEPATH).bin # view a file's hex contents
	hexdump -C $^

write: ${FILEPATH}.bin # write a binary to the EEPROM (requires Linux/Unix)
ifeq ($(OS),Windows)
	@echo "Can't write to an EEPROM from a CLI on a Windows machine"
	@echo "(get in touch with me if you know how)"
else
	minipro -p AT28C256 -w ${FILEPATH}.bin
endif

simulate: $(FILEPATH).bin
ifeq ($(SIM),TRUE)
	@echo "ERROR: NO COMMAND TO SIMULATE!"
else
	@echo "ERROR: Simulate flag not set. Add SIM=TRUE to your make command to enable 6502 simulation."
endif

help: # display this help screen
	@printf "$(HELPF)" "all (default)" "Assemble, link, and write file to the EEPROM (if possible)."
	@printf "$(HELPF)" "assemble"      "Compile the assembly source."
	@printf "$(HELPF)" "link"	      	 "Link the object code generated by the above step."
	@printf "$(HELPF)" "write"         "Write the generated binary file to EEPROM."
	@printf "$(HELPF)" "dump"       	 "View a hexdump of the binary file's contents."
	@printf "$(HELPF)" "clean"       	 "Delete all binary and object files."
	@printf "$(HELPF)" "install"       "Install dependencies (see "Requirements" section)."
	@printf "$(HELPF)" "simulate"      "Simulate 6502 runtime."
	@printf "$(HELPF)" "loc"           "Show the lines of code of all *.asm files."
	@printf "$(HELPF)" "help"          "Shows this message."

clean: #Delete all binaries
	rm -f *.bin *.o

loc: # Show the lines of code of all *.asm files 
	@find . -name "*.asm" | xargs wc -l

## Docker targets

# .PHONY: build
# build: # Builds the Docker stuff
# 	docker build -t sole .

# .PHONY: sh
# sh: # opens a shell to the shoebox docker container
# 	docker-compose run -it sole

# .PHONY: down
# down: # kills the shoebox docker container
# 	docker-compose down
